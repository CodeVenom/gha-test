name: print-tf-plan
on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
permissions:
  contents: read
  id-token: write
  issues: write
concurrency:
  group: tf
  cancel-in-progress: false
env:
  JJ_DIR: /home/runner/work/gha-test/gha-test/.github/workflows/
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      # if workflow has no severe issues this will be set to 0 automatically
      JJ_ISSUE_COUNT: "1"
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: test workflow
        run: |
          cd ${{ env.JJ_DIR }}tests/
          ./test.sh runTestSuite
      - name: create issue if tests failed
        if: failure()
        run: ${{ env.JJ_DIR }}issues.sh createIssue "${{ secrets.GITHUB_TOKEN }}"
      - name: update issue count
        run: ${{ env.JJ_DIR }}issues.sh updateIssueCount "${{ secrets.GITHUB_TOKEN }}"
      - name: fail if issues exist
        if: ${{ env.JJ_ISSUE_COUNT != '0' }}
        run: exit 1
  prepare:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      prefix-list: ${{ steps.moo.outputs.prefix-list }}
      prefix-list-length: ${{ steps.moo.outputs.prefix-list-length }}
      workflows: ${{ steps.moo.outputs.workflows }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: moo
        id: moo
        run: ${{ env.JJ_DIR }}jj.sh prepare
#  build:
#    if: ${{ !needs.prepare.outputs.workflows && needs.prepare.outputs.prefix-list-length != '0' }}
#    needs: prepare
#    runs-on: ubuntu-latest
#    env:
#      JJ_PREFIX: ""
#      JJ_REGION: "eu-central-1"
#      JJ_ROLE: "none"
#    strategy:
#      fail-fast: false
#      matrix:
#        tf: ${{ fromJson(needs.prepare.outputs.prefix-list) }}
#    steps:
#      - name: checkout
#        uses: actions/checkout@v3
#        with:
#          fetch-depth: 1
#      - name: onehundred
#        run: ${{ env.JJ_DIR }}me.sh extractMappedValues "${{ matrix.tf }}" "${{ env.JJ_DIR }}path-prefix-aws-role-mapping.json"
#      - name: fail if role not found
#        if: ${{ env.JJ_ROLE == 'none' }}
#        # TODO: create issue before exiting => should not block workflow runs
#        run: exit 1
#      - name: install stuff
#        run: |
#          brew install tfenv
#          tfenv install 1.1.8
#          tfenv use 1.1.8
#      - name: yo
#        run: |
#          echo "${{ env.JJ_MODE }}"
#          echo "${{ env.JJ_REGION }}"
#          echo "${{ env.JJ_ROLE }}"
#          echo "${{ matrix.tf }}"
#      - name: assume role
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          role-to-assume: ${{ env.JJ_ROLE }}
#          aws-region: ${{ env.JJ_REGION }}
#      - name: create tf plan
#        run: |
#          cd ${{ matrix.tf }}
#          terraform init
#          terraform plan -lock=false > plan.txt
#          cat plan.txt
#      - name: jj-prefix
#        run: |
#          export JJ_TEMP=$(echo ${{ matrix.tf }} | sed -E 's%/%-%g')
#          echo "JJ_PREFIX=$JJ_TEMP" >> "$GITHUB_ENV"
#      - name: store tf plan
#        uses: actions/upload-artifact@v3
#        with:
#          name: ${{ env.JJ_PREFIX }}plan.txt
#          path: ${{ matrix.tf }}plan.txt
#          retention-days: 1
